plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'


}


android {
    compileSdk rootProject.ext.coreCompileSdkVersion
//    compileSdkVersion coreCompileSdkVersion

    defaultConfig {
        configurations.all {
            resolutionStrategy { force "androidx.core:core-ktx:$rootProject.coreKtxVersion" }
        }
        minSdk rootProject.ext.coreMinSdkVersion
        targetSdk rootProject.ext.coreTargetSdkVersion
        consumerProguardFiles 'motrack-proguard-rules.txt'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    lint {
        // If set to true (default), stops the build if errors are found.
        abortOnError false
        // If true, only report errors.
        ignoreWarnings true
    }



}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.core:core-ktx:$rootProject.coreKtxVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    // Testing
    testImplementation "junit:junit:$rootProject.JunitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    implementation 'com.google.code.gson:gson:2.9.0'
}

project.group = "io.gitlab.motrack-org"
project.archivesBaseName = "MoTrackSDK"
project.version = "1.0.0"
//apply from: '../publish-module.gradle'

//*********************************


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}


artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                }

                artifact androidSourcesJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = PUBLISH_DESCRIPTION
                    url = PUBLISH_URL
                    licenses {
                        license {
                            name = PUBLISH_LICENSE_NAME
                            url = PUBLISH_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = PUBLISH_DEVELOPER_ID
                            name = PUBLISH_DEVELOPER_NAME
                            email = PUBLISH_DEVELOPER_EMAIL
                        }
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = PUBLISH_SCM_CONNECTION
                        developerConnection = PUBLISH_SCM_DEVELOPER_CONNECTION
                        url = PUBLISH_SCM_URL
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}


/*

publishing {
    publications {
        mavenAndroidCore(MavenPublication) {
            customizePom(pom)
            groupId rootProject.ext.PUBLISH_GROUP_ID
            artifactId 'android-sdk'
            version rootProject.ext.PUBLISH_VERSION

            artifact adtraceCoreJarRelease
            artifact adtraceCoreAndroidJavadocsJar
            artifact adtraceCoreAndroidSourcesJar
        }

        mavenAndroidCoreAAR(MavenPublication) {
            customizePomForAar(pom)
            groupId rootProject.ext.PUBLISH_ARTIFACT_ID
            artifactId 'android-sdk'
            version rootProject.ext.coreVersionName

            artifact("$buildDir/outputs/aar/android-sdk-release.aar"){
                builtBy tasks.getByPath("adtraceCoreAarRelease")
            }
            artifact adtraceCoreAndroidJavadocsJar
            artifact adtraceCoreAndroidSourcesJar
        }

    }

    repositories {
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            if (project.hasProperty("sonatypeUsername")) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        // Add all items necessary for maven central publication.
        asNode().children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'The MoTrack SDK for Android'
            name 'MoTrack Android SDK'
            url 'https://gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk'
            organization {
                name 'motrack'
                url 'https://www.motrack.io'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                }
            }
            scm {
                url 'git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                connection 'scm:git:git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                developerConnection 'scm:git:git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
            }
            developers {
                developer {
                    name 'Hamed Safarzadeh'
                    email = 'motrackdev@gmail.com'
                }
            }
        }
    }
}

def customizePomForAar(pom) {
    pom.withXml {
        // Remove the existing packaging field, as it has to be overridden with type aar
        asNode().remove(asNode().get("packaging"))

        // Add all items necessary for maven central publication.
        asNode().children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'The MoTrack SDK for Android'
            name 'MoTrack Android SDK'
            url 'https://gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk'
            packaging 'aar'
            organization {
                name 'motrack'
                url 'https://www.motrack.io'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                }
            }
            scm {
                url 'git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                connection 'scm:git:git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                developerConnection 'scm:git:git@gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
            }
            developers {
                developer {
                    name 'Hamed Safarzadeh'
                    email = 'motrackdev@gmail.com'
                }
            }
        }
    }
}
model {
    tasks.generatePomFileForMavenAndroidCorePublication {
        destination = file("${project.buildDir}/generated-pom.xml")
    }

// TODO check if/how to replace this tasks
    tasks.publishMavenAndroidCorePublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenAndroidCorePublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }


    tasks.generatePomFileForMavenAndroidCoreAARPublication {
        destination = file("${project.buildDir}/generated-pom.xml")
    }

//TODO check if/how to replace this tasks
    tasks.publishMavenAndroidCoreAARPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenAndroidCoreAARPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }


}

signing {
    sign configurations.archives
    sign publishing.publications.mavenAndroidCore
    sign publishing.publications.mavenAndroidCoreAAR
}
*/

