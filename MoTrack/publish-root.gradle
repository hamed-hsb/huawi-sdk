// Create variables with empty default values
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}

// Set up Sonatype repository
nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
/*
apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}


artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                }

                artifact androidSourcesJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = PUBLISH_DESCRIPTION
                    url = PUBLISH_URL
                    licenses {
                        license {
                            name = PUBLISH_LICENSE_NAME
                            url = PUBLISH_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = PUBLISH_DEVELOPER_ID
                            name = PUBLISH_DEVELOPER_NAME
                            email = PUBLISH_DEVELOPER_EMAIL
                        }
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = PUBLISH_SCM_CONNECTION
                        developerConnection = PUBLISH_SCM_DEVELOPER_CONNECTION
                        url = PUBLISH_SCM_URL
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

// Create variables with empty default values

//the ID of the GPG key pair, the last eight characters of its fingerprint
ext["signing.keyId"] = '8CAF777F'

// the passphrase of the key pair
ext["signing.password"] = 'Devhsb'

//the base64 encoded private key you exported earlier
ext["signing.key"] = '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'

//are your account details for MavenCentral, which you’ve chosen at the Jira registration step. We’ll get back to where
ext["ossrhUsername"] = 'motrack'
ext["ossrhPassword"] = 'Devhsb@1401@'
ext["sonatypeStagingProfileId"] = '182a15d85798b'



task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.key"] = System.getenv('SIGNING_KEY')
}


nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword


            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}


afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact androidSourcesJar
              //  artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'motrack Android SDK'
                    url = 'https://gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                    licenses {
                        license {
                            name = 'Stream License'
                            url = 'https://gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk/-/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            name = 'hamed safarzadeh'
                            email = 'marton@getstream.io'
                        }
                        // Add all other devs here...
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = 'scm:git:gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk'
                        developerConnection = 'scm:git:ssh://git@gitlab.motrack.ir:766/motrack-org/motrack-android-group/androidsdk.git'
                        url = 'https://gitlab.motrack.ir/motrack-org/motrack-android-group/androidsdk.git'
                    }
                }
            }
        }
    }
}*/
