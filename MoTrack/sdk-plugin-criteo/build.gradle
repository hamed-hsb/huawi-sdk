plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk rootProject.ext.coreMinSdkVersion
        targetSdk rootProject.ext.coreTargetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "androidx.core:core-ktx:$rootProject.coreKtxVersion"
    implementation project(path: ':sdk-core')
}


/*// read local properties
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(localPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
}

task adjustCriteoAndroidAar (type: Copy) {
    dependsOn 'assembleRelease'

    from('build/outputs/aar/')
    include 'sdk-plugin-criteo-release.aar'
    destinationDir file('build/libs/')
    rename 'sdk-plugin-criteo-release.aar', "${project.name}.aar"

}

task adjustCriteoAndroidJar(type: Jar) {
    dependsOn 'compileReleaseJavaWithJavac'
    from('build/intermediates/javac/release/classes/')
    archiveName "${project.name}.jar"
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += variant.javaCompileProvider.get().classpath
        }
    }
}

task adjustCriteoAndroidJavadocsJar(type: Jar) {
    dependsOn 'androidJavadocs'
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task adjustCriteoAndroidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}*/

/*artifacts {
    archives adjustCriteoAndroidJar
    archives adjustCriteoAndroidJavadocsJar
    archives adjustCriteoAndroidSourcesJar
}*/

/*
publishing {
    publications {
        mavenAndroidCriteo(MavenPublication) {
            customizePom(pom)
            groupId rootProject.ext.adjustGroupId
            artifactId 'adjust-android-criteo'
            version rootProject.ext.coreVersionName

            artifact adjustCriteoAndroidJar
            artifact adjustCriteoAndroidJavadocsJar
            artifact adjustCriteoAndroidSourcesJar
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            if (project.hasProperty("sonatypeUsername")) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // Add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'The Criteo plugin for Adjust SDK for Android'
            name 'Adjust Android SDK Criteo plugin'
            url 'https://github.com/adjust/android_sdk'

            organization {
                name 'adjust GmbH'
                url 'http://www.adjust.com'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                }
            }
            scm {
                url 'git@github.com:adjust/android_sdk.git'
                connection 'scm:git:git@github.com:adjust/android_sdk.git'
                developerConnection 'scm:git:git@github.com:adjust/android_sdk.git'
            }
            developers {
                developer {
                    name 'Pedro Silva'
                    email 'pedro@adjust.com'
                }
                developer {
                    name 'Ugljesa Erceg'
                    email 'ugljesa@adjust.com'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenAndroidCriteoPublication {
        destination = file("${project.buildDir}/generated-pom.xml")
    }
    */
/* TODO check if/how to replace this tasks
    tasks.publishMavenAndroidCriteoPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenAndroidCriteoPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
    *//*

}

signing {
    sign publishing.publications.mavenAndroidCriteo
}*/
